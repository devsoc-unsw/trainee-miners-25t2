// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    forms          Form[]
    formResponses  FormResponse[]
    templateBlocks TemplateBlock[]
}

model Form {
    id          String   @id @default(cuid())
    title       String
    description String?
    fields      Json // Store form field configuration as JSON
    isPublic    Boolean  @default(false)
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    responses FormResponse[]

    @@index([createdById])
    @@index([isPublic])
}

model FormResponse {
    id        String   @id @default(cuid())
    data      Json // Store response data as JSON
    createdAt DateTime @default(now())

    form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId String

    respondent   User?   @relation(fields: [respondentId], references: [id])
    respondentId String?

    @@index([formId])
    @@index([respondentId])
}

model FormTemplate {
    id          String   @id @default(cuid())
    name        String
    description String?
    category    String
    fields      Json // Pre-defined form field configuration
    isPublic    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([category])
    @@index([isPublic])
}

model TemplateBlock {
    id          String   @id @default(cuid())
    name        String
    description String?
    category    String
    fields      Json // Template block field configuration
    isCustom    Boolean  @default(false)
    isPublic    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User?   @relation(fields: [createdById], references: [id])
    createdById String?

    @@index([category])
    @@index([isCustom])
    @@index([isPublic])
    @@index([createdById])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
